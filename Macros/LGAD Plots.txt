
TFile *hfile1 = TFile::Open("C:/Users/LeCroyUser/Desktop/HGTD Calibration/120V.root");
TH2D *wl2 = new TH2D("wl2", "wl2", 600, -15.0e-9, 15.0e-9, 400, -0.300, 0.100);
wfm->Project("wl2","w02:t02");
TProfile *wlp2 = wl2->ProfileX("wlp2",0,1000,"");
TH2D *wl3 = new TH2D("wl3", "wl3", 600, -15.0e-9, 15.0e-9, 400, -0.300, 0.100);
wfm->Project("wl3","w03:t03");
TProfile *wlp3 = wl3->ProfileX("wlp3",0,1000,"");
wlp2->SetTitle("120V Callibration Average wavform shape")
wlp2->SetLineColor(42);
wlp2->SetMarkerColor(42);
wlp2->SetLineWidth(2);
wlp2->SetMarkerSize(2);
wlp2->SetStats(0);
wlp2->GetXaxis()->SetTitle("Time (sec)");
wlp2->GetYaxis()->SetTitle("Amplitude (V)");
wlp2->Draw("PLC");
wlp3->SetLineColor(38);
wlp3->SetMarkerColor(38);
wlp3->SetLineWidth(2);
wlp3->SetMarkerSize(2);
wlp3->SetStats(0);
wlp3->Draw("PLC""same");
TLegend* leg = new TLegend(0.2,0.2,0.4,0.4);
gStyle->SetLegendBorderSize(0);
gStyle->SetLegendFillColor(0);
leg->SetTextSize(0.032);
leg->SetTextFont(42);
leg->SetHeader("#it{#bf{ATLAS}} Internal");
leg->AddEntry(wlp2, "CH2 Channel 1");
leg->AddEntry(wlp3, "CH3 Channel 2");
leg->SetTextSize(0.032);
leg->Draw("same");




//void HGTDUtils::center_of_gaus_csv(const char* filename, float window, int ch)
//{
//	// read tree which already constains pmax fit landau
//	// average pulses in window around MPV of Landau
//	// save average waveform to csv file
//
//	//read tree
//	TFile* treefile = new TFile(filename);
//	TTree* wfm = (TTree*)treefile->Get("wfm");
//	wfm->Print();
//	Form("w%02u", ch)
//	int npoints = wfm->GetLeaf("w0")->GetLen(); // number of points per event
//	int nevents = wfm->GetBranch("w0")->GetEntries(); //number of events
//
//	vector<float> avgw; //average waveform
//	avgw.reserve(npoints);
//
//	gStyle->SetOptFit();
//	TCanvas *c1 = new TCanvas("c1");
//	TH1F* h1 = new TH1F("h1", "charge", 600 / 5, 0, 600e-15);
//	for (int i = 0; i < nevents; i++) 
//	    {
//		 wfm->GetEntry(i);
//		 h1->Fill(wfm->GetLeaf("charge")->GetValue(0));
//	    }
//	h1->Fit("gaus");
//	TF1 *fitResult = h1->GetFunction("gaus");
//	fitResult->GetParameter(0);
//
//	double MPV = 300 * 1e-15;
//	double pmax, t[npoints], w[npoints], navg = 0;
//	double low = MPV - window / 2, high = MPV + window / 2;
//	for (int i = 0; i<nevents; i++) 
//	    {
//		 wfm->SetBranchAddress("charge", &pmax); // change channel
//		 wfm->SetBranchAddress("t", &t); // change channel
//		 wfm->SetBranchAddress("w", &w);
//		 wfm->GetEntry(i);
//		 if (pmax < high && pmax >low) 
//		    {
//			 for (int j = 0; j < npoints; j++) avgw.at(j) += avgw.w(j);
//			 navg += 1;
//		    }
//	    }
//
//	for (int j = 0; j< npoints; j++) avgw.at(j) = avgw.at(j) / navg;
//	ofstream myfile;
//	char name[512];
//	sprintf(name, "%s_avgw.csv", filename);
//	myfile.open(name);
//	for (int j = 0; j < npoints; j++) 
//	    {
//		 myfile << t[j] << ",";
//		 myfile << avgw[j] << ",";
//		 cout << avgw[j] << endl;
//		 myfile << "\n";
//	    }
//}
// --------------------------------------------------------------------------------------------------------------